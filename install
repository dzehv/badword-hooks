#!/usr/bin/env perl

use strict;
use warnings;
use Data::Dumper;
use feature qw(say);
use Fcntl;
use Getopt::Long;
use Cwd qw(getcwd);

my %h = (
	t => '',
	type => '',
	r => [],
	repo => [],
);
GetOptions (
	\%h,
	't=s',
	'type=s',
	'r=s@',
	'repo=s@',
);
@{$h{'repo'}} = (@{$h{'repo'}}, @{$h{'r'}});

unless (scalar @{$h{'repo'}}) {
    say "No git repos specified to install";
    exit 1;
}
$h{'type'} = $h{'t'} if $h{'t'};

# Default script type is pre-commit
$h{'type'} ||= 'pre-commit';

my $cwd = getcwd();
my $tpl = "$cwd/src/$h{'type'}.tpl";

my $hook;
do {
	local $/ = undef;
	die "Can't open hook template: $!" unless (open my $fh, '<', $tpl);
	binmode $fh;
	my $raw = <$fh>;
	close $fh;
	$hook = sprintf($raw, "$cwd/lib", "$cwd/badwords");
} while (0);

for my $git_repo (@{$h{'repo'}}) {
	if (-d "$git_repo/.git/hooks") {
		# Repo is cli
        my $file = "$git_repo/.git/hooks/$h{'type'}";
        if (-e $file) {
            say "WARNING: File [$file] existing, will be replaced!";
        }
        say "Installing $h{'type'} hook to repo: $git_repo";
		place_hook($hook => $file);
	}
	elsif (-d "$git_repo/hooks") {
		# Repo is bare
        my $file = "$git_repo/hooks/$h{'type'}";
        if (-e $file) {
            say "WARNING: File [$file] existing, will be replaced!";
        }
        say "Installing $h{'type'} hook to repo: $git_repo";
		place_hook($hook => $file);
	}
	else {
		say "Not a git repo [$git_repo]: skipping.";
		next;
	}
}

sub place_hook {
	my ($hook, $file) = @_;

	die "Can't write hook template: $!" unless (sysopen my $fh, $file, O_WRONLY|O_TRUNC|O_CREAT, 0755);
	print $fh $hook;
	close $fh;
}
